# Author: David Len (NEL-V)
# YT: https://www.youtube.com/@justneldivad
# version: 0.1


from flpianoroll import *

label = 'Sustain Simulation'

dialog = """
by NEL-V
version: 0.1

This script cuts the length of each note to the end of its bar (selectable from form), while ensuring it doesn't overlap with the next note of the same pitch. Before using, you should have already extended the sustain of all notes as long as you need. 
                        
It applies only to selected notes in the Piano Roll.
"""

class NoteObj:
    def __init__(self, time, length, number, idx):
        self.start = time
        self.end = time + length
        self.number = number
        self.idx = idx

    def set_end(self, new_end):
        self.end = new_end
        self.length = self.end - self.start




def createDialog():
    form = ScriptDialog('Sustain Simulation', dialog)

    # Add a combo box for the user to select a custom bar length between 1 and ts_num
    form.AddInputKnobInt(label, 4, 1, 16)
    return form


def apply(form):
    # Constants
    PPQ = score.PPQ  # Pulses per quarter note (ticks per quarter note)
    ts_num = score.tsnum  # Time signature numerator (beats per measure)
    ts_den = score.tsden  # Time signature denominator (note value for one beat)

    # Get the user-selected bar length
    bar_length = round(form.GetInputValue(label))  # Get the custom bar length from the form
    if bar_length < 1 or bar_length > 16:
        print("Invalid bar length. Please select a value between 1 and 16.")
        return

    # Bar length in ticks (based on the time signature and PPQ)
    bar_length = PPQ * bar_length

    # Collect selected notes and create NoteObj instances
    notes = []
    for i in range(score.noteCount):
        note = score.getNote(i)
        if note.selected:
            notes.append(NoteObj(note.time, note.length, note.number, i))

    if not notes:
        print("No notes selected. Ensure you have selected notes in the Piano Roll.")
        return

    print(f"Processing {len(notes)} selected notes.")

    # Group notes by pitch
    notes_by_pitch = {}
    for note in notes:
        if note.number in notes_by_pitch:
            notes_by_pitch[note.number].append(note)
        else:
            notes_by_pitch[note.number] = [note]

    # Process each group of notes
    for pitch, pitch_notes in notes_by_pitch.items():
        pitch_notes.sort(key=lambda x: x.start)  # Sort by start time

        for i, note in enumerate(pitch_notes):
            # Calculate the end of the current bar
            bar_end = (note.start // bar_length + 1) * bar_length

            # Set the note end to the minimum of bar end or its current end
            note.set_end(min(note.end, bar_end))

            # Check for overlap with the next note
            if i + 1 < len(pitch_notes) and pitch_notes[i + 1].start < note.end:
                note.set_end(pitch_notes[i + 1].start)

    # Apply changes back to the Piano Roll
    updated_notes = []
    for note in notes:
        updated_note = score.getNote(note.idx)
        updated_note.length = note.end - note.start
        updated_notes.append(updated_note)

    # Clear and re-add notes
    score.clearNotes("True")
    for note in updated_notes:
        score.addNote(note)

    print("Sustain simulation applied successfully.")
    return
